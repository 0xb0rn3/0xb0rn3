name: üîÑ Update Profile README

on:
  # Runs every day at 6 AM UTC (2 AM EST)
  schedule:
    - cron: '0 6 * * *'
  
  # Allows manual trigger from GitHub UI
  workflow_dispatch:
  
  # Runs when changes are pushed to main branch
  push:
    branches: [ main ]
    paths: 
      - '.github/workflows/update-readme.yml'
      - 'scripts/**'

jobs:
  update-readme:
    name: üìä Generate Fresh Profile Stats
    runs-on: ubuntu-latest
    
    steps:
    - name: üîÑ Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history for accurate stats
    
    - name: üêç Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: üì¶ Install Dependencies
      run: |
        pip install requests python-dateutil PyYAML
        echo "Dependencies installed successfully"
    
    - name: üìä Generate Repository Statistics
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        USERNAME: ${{ github.repository_owner }}
      run: |
        cat > generate_stats.py << 'EOF'
        import requests
        import json
        from datetime import datetime, timedelta
        import os
        from collections import defaultdict
        
        def get_github_data(username, token):
            """Fetch comprehensive GitHub profile data"""
            headers = {
                'Authorization': f'token {token}',
                'Accept': 'application/vnd.github.v3+json'
            }
            
            # Get user info
            user_url = f'https://api.github.com/users/{username}'
            user_response = requests.get(user_url, headers=headers)
            user_data = user_response.json()
            
            # Get repositories with detailed info
            repos_url = f'https://api.github.com/users/{username}/repos'
            repos_response = requests.get(repos_url, headers=headers, params={
                'per_page': 100,
                'sort': 'updated',
                'type': 'owner'
            })
            repos_data = repos_response.json()
            
            return user_data, repos_data
        
        def calculate_stats(repos_data):
            """Calculate comprehensive repository statistics"""
            total_repos = len(repos_data)
            total_stars = sum(repo['stargazers_count'] for repo in repos_data)
            total_forks = sum(repo['forks_count'] for repo in repos_data)
            
            # Language statistics
            languages = defaultdict(int)
            for repo in repos_data:
                if repo['language']:
                    languages[repo['language']] += 1
            
            # Recent activity (repositories updated in last 30 days)
            thirty_days_ago = datetime.now() - timedelta(days=30)
            recent_repos = []
            
            for repo in repos_data:
                updated_at = datetime.strptime(repo['updated_at'], '%Y-%m-%dT%H:%M:%SZ')
                if updated_at > thirty_days_ago:
                    recent_repos.append({
                        'name': repo['name'],
                        'description': repo['description'],
                        'language': repo['language'],
                        'stars': repo['stargazers_count'],
                        'updated': repo['updated_at']
                    })
            
            return {
                'total_repos': total_repos,
                'total_stars': total_stars,
                'total_forks': total_forks,
                'languages': dict(languages),
                'recent_activity': recent_repos[:6]  # Top 6 recently updated
            }
        
        def generate_projects_html(recent_repos):
            """Generate HTML for the projects section based on recent repositories"""
            projects_html = """<div align="center">

<table>"""
            
            # Process repositories in pairs for table layout
            for i in range(0, len(recent_repos), 2):
                projects_html += "\n<tr>"
                
                # First repository in the pair
                repo = recent_repos[i]
                description = get_repo_description(repo['name'])
                projects_html += f"""
<td align="center" width="50%">
<a href="https://github.com/0xb0rn3/{repo['name']}">
<img src="https://github-readme-stats.vercel.app/api/pin/?username=0xb0rn3&repo={repo['name']}&theme=tokyonight&hide_border=true&bg_color=0D1117&title_color=58A6FF&text_color=C9D1D9&icon_color=58A6FF" alt="{repo['name']}"/>
</a>
<br>
<sub><b>{description['title']}</b></sub>
<br>
<sub>{description['subtitle']}</sub>
</td>"""
                
                # Second repository in the pair (if exists)
                if i + 1 < len(recent_repos):
                    repo = recent_repos[i + 1]
                    description = get_repo_description(repo['name'])
                    projects_html += f"""
<td align="center" width="50%">
<a href="https://github.com/0xb0rn3/{repo['name']}">
<img src="https://github-readme-stats.vercel.app/api/pin/?username=0xb0rn3&repo={repo['name']}&theme=tokyonight&hide_border=true&bg_color=0D1117&title_color=58A6FF&text_color=C9D1D9&icon_color=58A6FF" alt="{repo['name']}"/>
</a>
<br>
<sub><b>{description['title']}</b></sub>
<br>
<sub>{description['subtitle']}</sub>
</td>"""
                else:
                    # Fill empty cell if odd number of repos
                    projects_html += "\n<td align=\"center\" width=\"50%\"></td>"
                
                projects_html += "\n</tr>"
            
            projects_html += """
</table>

</div>"""
            
            return projects_html
        
        def get_repo_description(repo_name):
            """Get appropriate description for each repository based on its purpose"""
            descriptions = {
                'fastdl': {
                    'title': '‚ö° Fast Download Manager',
                    'subtitle': 'High-performance download automation tool'
                },
                'fetch-tools': {
                    'title': 'üîç Data Retrieval Utilities', 
                    'subtitle': 'Comprehensive data fetching and processing tools'
                },
                'kygox': {
                    'title': 'üõ°Ô∏è Security Analysis Framework',
                    'subtitle': 'Advanced security assessment and analysis tools'
                },
                'krilin': {
                    'title': '‚öîÔ∏è Penetration Testing Suite',
                    'subtitle': 'Python toolkit for ethical hacking operations'
                },
                'wallpimp': {
                    'title': 'üé® Wallpaper Management Tool',
                    'subtitle': 'Automated wallpaper customization utility'
                },
                'gre3hn': {
                    'title': 'üåø Green Hat Security Tool',
                    'subtitle': 'Ethical hacking and security research utilities'
                }
            }
            
            # Return specific description if available, otherwise generate generic one
            if repo_name in descriptions:
                return descriptions[repo_name]
            else:
                return {
                    'title': f'üîß {repo_name.title()}',
                    'subtitle': 'Security and automation tooling'
                }
        
        def update_readme_content(stats, repos_data):
            """Update README.md with fresh statistics and latest projects"""
            with open('README.md', 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Update repository statistics section
            stats_section = f"**Total Repositories:** {stats['total_repos']} | **Total Stars Received:** {stats['total_stars']} | **Active Forks:** {stats['total_forks']} | **Open Source Contributions:** 150+"
            
            # Replace stats section
            import re
            stats_pattern = r'<!-- START STATS -->.*?<!-- END STATS -->'
            new_stats = f"<!-- START STATS -->\n{stats_section}\n<!-- END STATS -->"
            content = re.sub(stats_pattern, new_stats, content, flags=re.DOTALL)
            
            # Generate latest projects section
            projects_html = generate_projects_html(repos_data[:4])  # Top 4 most recent repos
            projects_pattern = r'<!-- LATEST-PROJECTS-START -->.*?<!-- LATEST-PROJECTS-END -->'
            new_projects = f"<!-- LATEST-PROJECTS-START -->\n{projects_html}\n<!-- LATEST-PROJECTS-END -->"
            content = re.sub(projects_pattern, new_projects, content, flags=re.DOTALL)
            
            # Update footer with current date
            current_date = datetime.now().strftime('%B %Y')
            footer_pattern = r'<!-- START FOOTER -->.*?<!-- END FOOTER -->'
            new_footer = f"""<!-- START FOOTER -->
<sub>üî• **Last Updated:** {current_date} | ‚ö° **Building the future of security automation** | üõ°Ô∏è **Securing the digital world, one tool at a time**</sub>

<img src="https://komarev.com/ghpvc/?username=0xb0rn3&style=for-the-badge&color=58A6FF&label=PROFILE+VIEWS" alt="Profile Views"/>
<!-- END FOOTER -->"""
            content = re.sub(footer_pattern, new_footer, content, flags=re.DOTALL)
            
            # Write updated content
            with open('README.md', 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ README updated with {stats['total_repos']} repos, {stats['total_stars']} stars")
            return True
        
        # Main execution
        if __name__ == "__main__":
            username = os.environ.get('USERNAME')
            token = os.environ.get('GITHUB_TOKEN')
            
            if not username or not token:
                print("‚ùå Missing USERNAME or GITHUB_TOKEN environment variables")
                exit(1)
            
            try:
                print(f"üîç Fetching GitHub data for {username}...")
                user_data, repos_data = get_github_data(username, token)
                
                print("üìä Calculating statistics...")
                stats = calculate_stats(repos_data)
                
                print("üìù Updating README.md...")
                if update_readme_content(stats, repos_data):
                    print("‚úÖ Profile README updated successfully!")
                    
                    # Output summary for GitHub Actions
                    print("\nüìà SUMMARY:")
                    print(f"   ‚Ä¢ Repositories: {stats['total_repos']}")
                    print(f"   ‚Ä¢ Total Stars: {stats['total_stars']}")
                    print(f"   ‚Ä¢ Total Forks: {stats['total_forks']}")
                    print(f"   ‚Ä¢ Primary Languages: {', '.join(list(stats['languages'].keys())[:5])}")
                else:
                    print("‚ùå Failed to update README")
                    exit(1)
                    
            except Exception as e:
                print(f"‚ùå Error: {str(e)}")
                exit(1)
        EOF
        
        python generate_stats.py
    
    - name: üöÄ Generate Advanced Activity Metrics
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        USERNAME: ${{ github.repository_owner }}
      run: |
        cat > generate_metrics.py << 'EOF'
        import requests
        import json
        from datetime import datetime, timedelta
        import os
        
        def get_contribution_data(username, token):
            """Fetch GitHub contribution activity using GraphQL API"""
            headers = {
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            }
            
            # GraphQL query for contribution data
            query = """
            query($username: String!) {
              user(login: $username) {
                contributionsCollection {
                  totalCommitContributions
                  totalIssueContributions
                  totalPullRequestContributions
                  totalRepositoryContributions
                }
                repositories(first: 100, ownerAffiliations: OWNER, orderBy: {field: UPDATED_AT, direction: DESC}) {
                  nodes {
                    name
                    description
                    stargazerCount
                    forkCount
                    primaryLanguage {
                      name
                      color
                    }
                    updatedAt
                    createdAt
                  }
                }
              }
            }
            """
            
            response = requests.post(
                'https://api.github.com/graphql',
                headers=headers,
                json={'query': query, 'variables': {'username': username}}
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"GraphQL query failed: {response.status_code}")
                return None
        
        def create_activity_summary(data):
            """Generate activity summary for README"""
            if not data or 'data' not in data:
                return "Unable to fetch contribution data"
            
            user_data = data['data']['user']
            contributions = user_data['contributionsCollection']
            
            total_contributions = (
                contributions['totalCommitContributions'] +
                contributions['totalIssueContributions'] +
                contributions['totalPullRequestContributions']
            )
            
            # Recent repositories (last 6 months)
            six_months_ago = datetime.now() - timedelta(days=180)
            recent_repos = []
            
            for repo in user_data['repositories']['nodes']:
                updated_at = datetime.fromisoformat(repo['updatedAt'].replace('Z', '+00:00'))
                if updated_at > six_months_ago.replace(tzinfo=updated_at.tzinfo):
                    recent_repos.append(repo)
            
            summary = {
                'total_contributions': total_contributions,
                'commits': contributions['totalCommitContributions'],
                'issues': contributions['totalIssueContributions'],
                'pull_requests': contributions['totalPullRequestContributions'],
                'recent_repos_count': len(recent_repos),
                'most_active_language': None
            }
            
            # Find most used language in recent repos
            language_count = {}
            for repo in recent_repos:
                if repo['primaryLanguage']:
                    lang = repo['primaryLanguage']['name']
                    language_count[lang] = language_count.get(lang, 0) + 1
            
            if language_count:
                summary['most_active_language'] = max(language_count, key=language_count.get)
            
            return summary
        
        # Main execution for metrics
        username = os.environ.get('USERNAME')
        token = os.environ.get('GITHUB_TOKEN')
        
        print("üìä Generating advanced metrics...")
        contribution_data = get_contribution_data(username, token)
        
        if contribution_data:
            summary = create_activity_summary(contribution_data)
            print("‚úÖ Advanced metrics generated successfully!")
            print(f"   ‚Ä¢ Total Contributions: {summary['total_contributions']}")
            print(f"   ‚Ä¢ Recent Active Repos: {summary['recent_repos_count']}")
            print(f"   ‚Ä¢ Most Active Language: {summary.get('most_active_language', 'N/A')}")
        else:
            print("‚ö†Ô∏è  Could not fetch advanced metrics, using basic stats only")
        EOF
        
        python generate_metrics.py
    
    - name: üîß Validate README Format
      run: |
        # Check if README.md exists and has proper structure
        if [ ! -f "README.md" ]; then
            echo "‚ùå README.md not found!"
            exit 1
        fi
        
        # Validate that key sections exist
        if ! grep -q "<!-- START STATS -->" README.md; then
            echo "‚ö†Ô∏è  Stats section markers not found"
        fi
        
        if ! grep -q "<!-- START FOOTER -->" README.md; then
            echo "‚ö†Ô∏è  Footer section markers not found"
        fi
        
        echo "‚úÖ README format validation passed"
    
    - name: üìù Commit Changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are any changes
        if git diff --quiet; then
            echo "üìã No changes detected in README.md"
        else
            git add README.md
            git commit -m "üîÑ Auto-update profile stats $(date +'%Y-%m-%d %H:%M UTC')"
            echo "‚úÖ Changes committed successfully"
        fi
    
    - name: üöÄ Push Changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main
    
    - name: üìä Workflow Summary
      run: |
        echo "## üéØ Profile Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Repository statistics refreshed" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Activity metrics updated" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ README format validated" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Changes committed and pushed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Last Updated:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
