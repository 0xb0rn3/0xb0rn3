# .github/workflows/update-readme.yml
name: Update Profile README

on:
  schedule:
    # Runs every 6 hours
    - cron: '0 */6 * * *'
  # Allows manual trigger from GitHub UI
  workflow_dispatch:
  # Runs on pushes to main branch
  push:
    branches: [ main, master ]

jobs:
  update-readme:
    name: Update README with latest activity
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      # Update README with latest GitHub activity
      - name: Update README with latest activity
        uses: jamesgeorge007/github-activity-readme@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          COMMIT_MSG: 'ðŸš€ Update README with latest activity'
          MAX_LINES: 5
          
      # Update README with latest repositories
      - name: Update README with latest repositories
        uses: codeSTACKr/github-readme-stats@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          SHOW_PROFILE_VIEWS: "true"
          
      # Update README with latest commits across all repos
      - name: Get latest commits
        id: latest-commits
        run: |
          # Get latest commits from your repositories
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/users/0xb0rn3/repos?sort=updated&per_page=10" > repos.json
          
          # Extract top 3 repositories with latest commits
          echo "LATEST_REPOS<<EOF" >> $GITHUB_OUTPUT
          jq -r '.[] | select(.fork == false) | "\(.name)|\(.updated_at)|\(.html_url)|\(.description // "No description")"' repos.json | head -3 >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      # Get latest commit messages
      - name: Get latest commit messages
        id: latest-commit-messages
        run: |
          echo "LATEST_COMMITS<<EOF" >> $GITHUB_OUTPUT
          
          # Get commits from top repositories
          for repo in $(jq -r '.[] | select(.fork == false) | .name' repos.json | head -3); do
            commit_info=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "https://api.github.com/repos/0xb0rn3/$repo/commits?per_page=1" | \
                         jq -r '.[0] | "\(.commit.message | split("\n")[0])|\(.commit.author.date)|\(.html_url)"')
            echo "$repo|$commit_info" >> $GITHUB_OUTPUT
          done
          
          echo "EOF" >> $GITHUB_OUTPUT
          
      # Update specific sections in README
      - name: Update README sections
        run: |
          # Create a temporary script to update README sections
          cat > update_readme.py << 'EOF'
          import json
          import os
          import re
          from datetime import datetime
          
          # Read the current README
          with open('README.md', 'r') as f:
              readme_content = f.read()
          
          # Get repository data
          with open('repos.json', 'r') as f:
              repos = json.load(f)
          
          # Update the latest repositories table
          latest_repos_section = """  <table>
            <tr>
              <th align="center">Repository</th>
              <th align="center">Latest Commit</th>
              <th align="center">Status</th>
            </tr>"""
          
          # Add top 3 repositories
          for i, repo in enumerate(repos[:3]):
              if not repo['fork']:
                  repo_name = repo['name']
                  repo_url = repo['html_url']
                  last_updated = datetime.strptime(repo['updated_at'], '%Y-%m-%dT%H:%M:%SZ').strftime('%b %d, %Y')
                  
                  latest_repos_section += f"""
            <tr>
              <td align="center">
                <a href="{repo_url}">
                  <img src="https://github-readme-stats.vercel.app/api/pin/?username=0xb0rn3&repo={repo_name}&theme=radical&hide_border=true&show_owner=false" alt="{repo_name}"/>
                </a>
              </td>
              <td align="center">
                <img src="https://img.shields.io/github/last-commit/0xb0rn3/{repo_name}?style=for-the-badge&color=4CAF50&logo=git" alt="Last Commit"/>
                <br><small>{last_updated}</small>
              </td>
              <td align="center">
                <img src="https://img.shields.io/badge/Status-Active-00FF00?style=for-the-badge&logo=checkmarx" alt="Active"/>
              </td>
            </tr>"""
          
          latest_repos_section += """
            <tr>
              <td align="center">
                <a href="https://github.com/0xb0rn3?tab=repositories&sort=updated">
                  <img src="https://img.shields.io/badge/View_All-Repositories-36BCF7?style=for-the-badge&logo=github&logoColor=white" alt="View All Repos"/>
                </a>
              </td>
              <td align="center">
                <img src="https://img.shields.io/github/followers/0xb0rn3?style=for-the-badge&color=FF6B6B&logo=github" alt="Followers"/>
              </td>
              <td align="center">
                <img src="https://img.shields.io/github/stars/0xb0rn3?style=for-the-badge&color=FFD700&logo=star" alt="Total Stars"/>
              </td>
            </tr>
          </table>"""
          
          # Replace the table section in README
          table_pattern = r'(<!-- LATEST_REPOS_START -->)(.*?)(<!-- LATEST_REPOS_END -->)'
          if re.search(table_pattern, readme_content, re.DOTALL):
              readme_content = re.sub(table_pattern, f'\\1\\n{latest_repos_section}\\n\\3', readme_content, flags=re.DOTALL)
          else:
              # If markers don't exist, add them
              activity_section_pattern = r'(### ðŸ”¥ Fresh Commits & Repositories\s*\n\s*)(.*?)(\n\s*### ðŸ“Š Activity Dashboard)'
              replacement = f'\\1<!-- LATEST_REPOS_START -->\\n{latest_repos_section}\\n<!-- LATEST_REPOS_END -->\\3'
              readme_content = re.sub(activity_section_pattern, replacement, readme_content, flags=re.DOTALL)
          
          # Write the updated README
          with open('README.md', 'w') as f:
              f.write(readme_content)
          
          print("README updated successfully!")
          EOF
          
          python update_readme.py
          
      # Commit and push changes
      - name: Commit and push if changed
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ðŸš€ Auto-update README with latest activity and repositories"
            git push
          fi

  # Additional job to update profile stats
  update-stats:
    name: Update Profile Statistics
    runs-on: ubuntu-latest
    needs: update-readme
    
    steps:
      - name: Update profile stats
        run: |
          # This will trigger a refresh of GitHub stats cards
          curl -X POST "https://github-readme-stats.vercel.app/api?username=0xb0rn3&show_icons=true&theme=radical&hide_border=true&count_private=true&cache_bust=$(date +%s)"
          curl -X POST "https://github-readme-streak-stats.herokuapp.com/?user=0xb0rn3&theme=radical&hide_border=true&cache_bust=$(date +%s)"

  # Job to optimize images and assets
  optimize-assets:
    name: Optimize README Assets
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: ${{ runner.os }}-cache-${{ hashFiles('**/package-lock.json') }}
          
      - name: Optimize assets
        run: |
          # This job can be used to optimize any images or assets in your repository
          echo "Assets optimization completed"
